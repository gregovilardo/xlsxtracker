{"ast":null,"code":"function getCookie(name) {\n  let cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nconst csrftoken = getCookie('csrftoken');\nexport async function getUserToken(username, password, url) {\n  const data = {\n    username: username,\n    password: password\n  };\n  const response = await fetch(`${url}/api/auth/login`, {\n    method: \"POST\",\n    body: new URLSearchParams(data),\n    headers: {\n      'X-CSRFToken': csrftoken,\n      \"Access-Control-Allow-Headers\": (\"X-CSRF-Token\", \"include\"),\n      // 'Access-Control-Allow-Origin': 'include',\n      // 'Content-Type': 'application/json'\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n    },\n    // withCredentials: true,\n    credentials: \"include\"\n  });\n  return response;\n} // change localhost for the env var","map":{"version":3,"sources":["X:/portfolio/CryptoDjangoReact/frontend/src/helpers/getUserToken.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","csrftoken","getUserToken","username","password","url","data","response","fetch","method","body","URLSearchParams","headers","credentials"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,UAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAMH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAf,CADqC,CAErC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACH;;AACD,MAAMU,SAAS,GAAGZ,SAAS,CAAC,WAAD,CAA3B;AAGA,OAAO,eAAea,YAAf,CAA4BC,QAA5B,EAAsCC,QAAtC,EAAgDC,GAAhD,EAAoD;AACvD,QAAMC,IAAI,GAAG;AAACH,IAAAA,QAAQ,EAAEA,QAAX;AAAqBC,IAAAA,QAAQ,EAACA;AAA9B,GAAb;AACA,QAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,iBAAR,EAA0B;AAClDI,IAAAA,MAAM,EAAE,MAD0C;AAElDC,IAAAA,IAAI,EAAE,IAAIC,eAAJ,CAAoBL,IAApB,CAF4C;AAGlDM,IAAAA,OAAO,EAAC;AACJ,qBAAeX,SADX;AAEJ,uCAAiC,gBAAgB,SAAjD,CAFI;AAGJ;AACA;AACA,sBAAiB;AALb,KAH0C;AAUlD;AACAY,IAAAA,WAAW,EAAE;AAXqC,GAA1B,CAA5B;AAaA,SAAON,QAAP;AACH,C,CAED","sourcesContent":["function getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\nconst csrftoken = getCookie('csrftoken');\r\n\r\n\r\nexport async function getUserToken(username, password, url){\r\n    const data = {username: username, password:password}\r\n    const response = await fetch(`${url}/api/auth/login`, {\r\n        method: \"POST\",\r\n        body: new URLSearchParams(data),\r\n        headers:{\r\n            'X-CSRFToken': csrftoken,\r\n            \"Access-Control-Allow-Headers\": (\"X-CSRF-Token\", \"include\"),\r\n            // 'Access-Control-Allow-Origin': 'include',\r\n            // 'Content-Type': 'application/json'\r\n            'Content-Type' : 'application/x-www-form-urlencoded; charset=UTF-8'\r\n        },\r\n        // withCredentials: true,\r\n        credentials: \"include\",\r\n    })\r\n    return response\r\n}\r\n\r\n// change localhost for the env var"]},"metadata":{},"sourceType":"module"}