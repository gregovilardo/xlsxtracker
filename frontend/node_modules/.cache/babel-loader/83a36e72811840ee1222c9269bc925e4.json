{"ast":null,"code":"var _jsxFileName = \"X:\\\\portfolio\\\\CryptoDjangoReact\\\\frontend\\\\src\\\\components\\\\PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useCurrentUser } from \"./CurrentUserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  const [isLogin, setIsLogin] = useState(false);\n  const {\n    currentUser,\n    saveCurrentUser\n  } = useCurrentUser();\n\n  if (currentUser.token) {\n    setIsLogin(true);\n  } else {\n    setIsLogin(false);\n  }\n\n  console.log(currentUser);\n  return (\n    /*#__PURE__*/\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    _jsxDEV(Route, { ...rest,\n      render: props => ({\n        isLogin\n      }) ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/signin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(PrivateRoute, \"7lurmRMCzAhgRq6n0HgD9/uN7GQ=\", false, function () {\n  return [useCurrentUser];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["X:/portfolio/CryptoDjangoReact/frontend/src/components/PrivateRoute.js"],"names":["React","useState","Route","Redirect","useCurrentUser","PrivateRoute","component","Component","rest","isLogin","setIsLogin","currentUser","saveCurrentUser","token","console","log","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAEC,SAAZ;AAAuB,KAAGC;AAA1B,CAAD,KAAqC;AAAA;;AACtD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM;AAAEU,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAmCR,cAAc,EAAvD;;AACA,MAAIO,WAAW,CAACE,KAAhB,EAAuB;AACnBH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAFD,MAEO;AACHA,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AAEA;AAAA;AAEI;AACA;AACA,YAAC,KAAD,OAAWH,IAAX;AAAiB,MAAA,MAAM,EAAEQ,KAAK,IAC1B;AAACP,QAAAA;AAAD,wBACI,QAAC,SAAD,OAAeO;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,gBAEE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA;AAJJ;AAUH,CArBD;;GAAMX,Y;UAGuCD,c;;;KAHvCC,Y;AAuBN,eAAeA,YAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useCurrentUser } from \"./CurrentUserContext\";\r\n\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    const [isLogin, setIsLogin] = useState(false)\r\n    \r\n    const { currentUser, saveCurrentUser } = useCurrentUser();\r\n    if (currentUser.token) {\r\n        setIsLogin(true)\r\n    } else {\r\n        setIsLogin(false)\r\n    }\r\n    console.log(currentUser);\r\n\r\n    return (\r\n\r\n        // Show the component only when the user is logged in\r\n        // Otherwise, redirect the user to /signin page\r\n        <Route {...rest} render={props => (\r\n            {isLogin} ?\r\n                <Component {...props} />\r\n            : <Redirect to=\"/signin\" />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}