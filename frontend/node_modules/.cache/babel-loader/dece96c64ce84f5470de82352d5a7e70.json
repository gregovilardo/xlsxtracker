{"ast":null,"code":"var _jsxFileName = \"X:\\\\portfolio\\\\CryptoDjangoReact\\\\frontend\\\\src\\\\components\\\\PrivateRoute.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useCurrentUser } from \"./CurrentUserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  // const [login, setLogin] = useState(false)\n  const {\n    currentUser\n  } = useCurrentUser();\n\n  function isLogin() {\n    if (currentUser.id) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // Show the component only when the user is logged in\n    // Otherwise, redirect the user to /signin page\n    _jsxDEV(Route, { ...rest,\n      render: props => isLogin() ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/auth\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(PrivateRoute, \"JaPimfEbpcxhZfr2MKNk5rzzc1w=\", false, function () {\n  return [useCurrentUser];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["X:/portfolio/CryptoDjangoReact/frontend/src/components/PrivateRoute.js"],"names":["Route","Redirect","useCurrentUser","PrivateRoute","component","Component","rest","currentUser","isLogin","id","props"],"mappings":";;;AAAA;AACA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAEC,SAAZ;AAAuB,KAAGC;AAA1B,CAAD,KAAqC;AAAA;;AACtD;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAkBL,cAAc,EAAtC;;AACA,WAASM,OAAT,GAAkB;AACd,QAAID,WAAW,CAACE,EAAhB,EAAoB;AAChB,aAAQ,IAAR;AACH,KAFD,MAEO;AACH,aAAQ,KAAR;AACH;AACJ;;AAED;AAAA;AAEI;AACA;AACA,YAAC,KAAD,OAAWH,IAAX;AAAiB,MAAA,MAAM,EAAEI,KAAK,IAC1BF,OAAO,kBACH,QAAC,SAAD,OAAeE;AAAf;AAAA;AAAA;AAAA;AAAA,cADG,gBAEL,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA;AAJJ;AAUH,CAtBD;;GAAMP,Y;UAGsBD,c;;;KAHtBC,Y;AAwBN,eAAeA,YAAf","sourcesContent":["// import React, { useState } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useCurrentUser } from \"./CurrentUserContext\";\r\n\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    // const [login, setLogin] = useState(false)\r\n    \r\n    const { currentUser } = useCurrentUser();\r\n    function isLogin(){\r\n        if (currentUser.id) {\r\n            return (true)\r\n        } else {\r\n            return (false)\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        // Show the component only when the user is logged in\r\n        // Otherwise, redirect the user to /signin page\r\n        <Route {...rest} render={props => (\r\n            isLogin() ?\r\n                <Component {...props} />\r\n            : <Redirect to=\"/auth\" />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}