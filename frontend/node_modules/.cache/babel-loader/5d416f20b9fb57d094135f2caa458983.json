{"ast":null,"code":"var _jsxFileName = \"X:\\\\portfolio\\\\CryptoDjangoReact\\\\frontend\\\\src\\\\components\\\\PublicRoute.js\",\n    _s = $RefreshSig$();\n\n// import React, {useState} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useCurrentUser } from './CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PublicRoute = ({\n  component: Component,\n  restricted,\n  ...rest\n}) => {\n  _s();\n\n  // const [login, setLogin] = useState(false)\n  const {\n    currentUser\n  } = useCurrentUser();\n\n  function isLogin() {\n    if (currentUser.token) {\n      return true;\n    } else {\n      return false;\n    }\n  } //if its restricted is going to redirect you to the home page once you loged in\n\n\n  return (\n    /*#__PURE__*/\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    _jsxDEV(Route, { ...rest,\n      render: props => isLogin() && restricted ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(PublicRoute, \"JaPimfEbpcxhZfr2MKNk5rzzc1w=\", false, function () {\n  return [useCurrentUser];\n});\n\n_c = PublicRoute;\nexport default PublicRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"sources":["X:/portfolio/CryptoDjangoReact/frontend/src/components/PublicRoute.js"],"names":["Route","Redirect","useCurrentUser","PublicRoute","component","Component","restricted","rest","currentUser","isLogin","token","props"],"mappings":";;;AAAA;AACA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAEC,SAAZ;AAAuBC,EAAAA,UAAvB;AAAmC,KAAGC;AAAtC,CAAD,KAAiD;AAAA;;AACjE;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAkBN,cAAc,EAAtC;;AACA,WAASO,OAAT,GAAkB;AACd,QAAID,WAAW,CAACE,KAAhB,EAAuB;AACnB,aAAO,IAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;AACJ,GAVgE,CAYjE;;;AACA;AAAA;AACI;AACA;AACA,YAAC,KAAD,OAAWH,IAAX;AAAiB,MAAA,MAAM,EAAEI,KAAK,IAC1BF,OAAO,MAAMH,UAAb,gBACI,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,gBAEE,QAAC,SAAD,OAAeK;AAAf;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA;AAHJ;AASH,CAtBD;;GAAMR,W;UAGsBD,c;;;KAHtBC,W;AAwBN,eAAeA,WAAf","sourcesContent":["// import React, {useState} from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useCurrentUser } from './CurrentUserContext';\r\n\r\nconst PublicRoute = ({component: Component, restricted, ...rest}) => {\r\n    // const [login, setLogin] = useState(false)\r\n    \r\n    const { currentUser } = useCurrentUser();\r\n    function isLogin(){\r\n        if (currentUser.token) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    //if its restricted is going to redirect you to the home page once you loged in\r\n    return (\r\n        // restricted = false meaning public route\r\n        // restricted = true meaning restricted route\r\n        <Route {...rest} render={props => (\r\n            isLogin() && restricted ?\r\n                <Redirect to=\"/\" />\r\n            : <Component {...props} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;"]},"metadata":{},"sourceType":"module"}