{"ast":null,"code":"var _jsxFileName = \"X:\\\\portfolio\\\\CryptoDjangoReact\\\\frontend\\\\src\\\\components\\\\PublicRoute.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useCurrentUser } from './CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PublicRoute = ({\n  component: Component,\n  restricted,\n  ...rest\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [login, setLogin] = useState(false);\n\n  function isLogin() {\n    _s();\n\n    const {\n      currentUser,\n      saveCurrentUser\n    } = useCurrentUser();\n\n    if (currentUser.token) {\n      return true;\n    } else {\n      return false;\n    }\n\n    console.log(currentUser);\n  }\n\n  _s(isLogin, \"F0jUOOt/zpNxguo/XAV//ttgX5E=\", false, function () {\n    return [useCurrentUser];\n  });\n\n  return (\n    /*#__PURE__*/\n    // restricted = false meaning public route\n    // restricted = true meaning restricted route\n    _jsxDEV(Route, { ...rest,\n      render: props => isLogin() && restricted ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s2(PublicRoute, \"+//W+l+RkuAeuFlcL78ouSIr6ug=\");\n\n_c = PublicRoute;\nexport default PublicRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoute\");","map":{"version":3,"sources":["X:/portfolio/CryptoDjangoReact/frontend/src/components/PublicRoute.js"],"names":["React","useState","Route","Redirect","useCurrentUser","PublicRoute","component","Component","restricted","rest","login","setLogin","isLogin","currentUser","saveCurrentUser","token","console","log","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAEC,SAAZ;AAAuBC,EAAAA,UAAvB;AAAmC,KAAGC;AAAtC,CAAD,KAAiD;AAAA;;AAAA;;AACjE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAlC;;AAEA,WAASW,OAAT,GAAkB;AAAA;;AACd,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAmCV,cAAc,EAAvD;;AACA,QAAIS,WAAW,CAACE,KAAhB,EAAuB;AACnB,aAAO,IAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACH;;AAXgE,KAGxDD,OAHwD;AAAA,YAIpBR,cAJoB;AAAA;;AAajE;AAAA;AACI;AACA;AACA,YAAC,KAAD,OAAWK,IAAX;AAAiB,MAAA,MAAM,EAAES,KAAK,IAC1BN,OAAO,MAAMJ,UAAb,gBACI,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,gBAEE,QAAC,SAAD,OAAeU;AAAf;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA;AAHJ;AASH,CAtBD;;IAAMb,W;;KAAAA,W;AAwBN,eAAeA,WAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useCurrentUser } from './CurrentUserContext';\r\n\r\nconst PublicRoute = ({component: Component, restricted, ...rest}) => {\r\n    const [login, setLogin] = useState(false)\r\n    \r\n    function isLogin(){\r\n        const { currentUser, saveCurrentUser } = useCurrentUser();\r\n        if (currentUser.token) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n        console.log(currentUser);\r\n    }\r\n\r\n    return (\r\n        // restricted = false meaning public route\r\n        // restricted = true meaning restricted route\r\n        <Route {...rest} render={props => (\r\n            isLogin() && restricted ?\r\n                <Redirect to=\"/dashboard\" />\r\n            : <Component {...props} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;"]},"metadata":{},"sourceType":"module"}