{"ast":null,"code":"var _jsxFileName = \"X:\\\\portfolio\\\\CryptoDjangoReact\\\\frontend\\\\src\\\\components\\\\UploadFile.js\",\n    _s = $RefreshSig$();\n\n// const input = document.getElementById('fileinput');\nimport { useState } from \"react\"; // This will upload the file after having read it\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UploadFile(props) {\n  _s();\n\n  const [file, setFile] = useState(null);\n  let formData = new FormData();\n\n  function handleChange(e) {\n    setFile(e.target.value);\n    console.log(e.target.value); // console.log(e.target);\n  }\n\n  console.log(formData);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n  }\n\n  function handleImgUpload(event, theFile) {\n    let formData = new FormData();\n    formData.append('file', theFile);\n\n    for (var pair of formData.entries()) {\n      console.log(pair[0] + ', ' + pair[1]);\n    }\n\n    fetch(`${props.url}/tracker/`, {\n      // Your POST endpoint\n      method: \"POST\",\n      headers: {\n        Authorization: \"Token \" + props.token,\n        'Acept': 'application/json' // Content-Type may need to be completely **omitted**\n        // or you may need something\n        // \"Content-Type\":\n\n      },\n      body: formData // This is your file object\n\n    }).then(response => response.json() // if the response is a JSON object\n    ).then(success => console.log(success) // Handle the success response object\n    ).catch(error => console.log(error) // Handle the error response object\n    );\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: event => handleImgUpload(event, file),\n      children: \"Subir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UploadFile, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n\n_c = UploadFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFile\");","map":{"version":3,"sources":["X:/portfolio/CryptoDjangoReact/frontend/src/components/UploadFile.js"],"names":["useState","UploadFile","props","file","setFile","formData","FormData","handleChange","e","target","value","console","log","handleSubmit","preventDefault","handleImgUpload","event","theFile","append","pair","entries","fetch","url","method","headers","Authorization","token","body","then","response","json","success","catch","error"],"mappings":";;;AAAA;AAEA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;;AACA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACtC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AAEA,MAAIK,QAAQ,GAAG,IAAIC,QAAJ,EAAf;;AACA,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACrBJ,IAAAA,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAC,CAACC,MAAF,CAASC,KAArB,EAFqB,CAIrB;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;;AAEA,WAASQ,YAAT,CAAsBL,CAAtB,EAAyB;AACrBA,IAAAA,CAAC,CAACM,cAAF;AACH;;AAED,WAASC,eAAT,CAAyBC,KAAzB,EAAgCC,OAAhC,EAAwC;AACpC,QAAIZ,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACa,MAAT,CAAgB,MAAhB,EAAwBD,OAAxB;;AACA,SAAK,IAAIE,IAAT,IAAiBd,QAAQ,CAACe,OAAT,EAAjB,EAAqC;AACjCT,MAAAA,OAAO,CAACC,GAAR,CAAYO,IAAI,CAAC,CAAD,CAAJ,GAAS,IAAT,GAAgBA,IAAI,CAAC,CAAD,CAAhC;AACH;;AACDE,IAAAA,KAAK,CAAE,GAAEnB,KAAK,CAACoB,GAAI,WAAd,EAA0B;AAC3B;AACAC,MAAAA,MAAM,EAAE,MAFmB;AAG3BC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,WAAWvB,KAAK,CAACwB,KAD3B;AAEL,iBAAS,kBAFJ,CAIL;AACA;AACA;;AANK,OAHkB;AAW3BC,MAAAA,IAAI,EAAEtB,QAXqB,CAWX;;AAXW,KAA1B,CAAL,CAaKuB,IAbL,CAcSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAdtB,CAcsC;AAdtC,MAgBKF,IAhBL,CAiBSG,OAAD,IAAapB,OAAO,CAACC,GAAR,CAAYmB,OAAZ,CAjBrB,CAiB0C;AAjB1C,MAmBKC,KAnBL,CAoBSC,KAAD,IAAWtB,OAAO,CAACC,GAAR,CAAYqB,KAAZ,CApBnB,CAoBsC;AApBtC;AAsBH;;AAGD,sBACI;AAAM,IAAA,QAAQ,EAAEpB,YAAhB;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEN;AAA7B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAES,KAAK,IAAID,eAAe,CAACC,KAAD,EAAQb,IAAR,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GArDuBF,U;;KAAAA,U","sourcesContent":["// const input = document.getElementById('fileinput');\r\n\r\nimport { useState } from \"react\";\r\n\r\n// This will upload the file after having read it\r\nexport default function UploadFile(props) {\r\n    const [file, setFile] = useState(null);\r\n    \r\n    let formData = new FormData()\r\n    function handleChange(e) {\r\n        setFile(e.target.value);\r\n        console.log(e.target.value);\r\n        \r\n        // console.log(e.target);\r\n    }\r\n    console.log(formData);\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n    }\r\n    \r\n    function handleImgUpload(event, theFile){\r\n        let formData = new FormData()\r\n        formData.append('file', theFile)\r\n        for (var pair of formData.entries()) {\r\n            console.log(pair[0]+ ', ' + pair[1]); \r\n        }\r\n        fetch(`${props.url}/tracker/`, {\r\n            // Your POST endpoint\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: \"Token \" + props.token,\r\n                'Acept': 'application/json',\r\n                \r\n                // Content-Type may need to be completely **omitted**\r\n                // or you may need something\r\n                // \"Content-Type\":\r\n            },\r\n            body: formData, // This is your file object\r\n        })\r\n            .then(\r\n                (response) => response.json() // if the response is a JSON object\r\n            )\r\n            .then(\r\n                (success) => console.log(success) // Handle the success response object\r\n            )\r\n            .catch(\r\n                (error) => console.log(error) // Handle the error response object\r\n            );\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"file\" onChange={handleChange}></input>\r\n            <button type=\"submit\" onClick={event => handleImgUpload(event, file)}>Subir</button>\r\n        </form>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}